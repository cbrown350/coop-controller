; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html
[platformio]
; default_envs = esp32-debug, esp32-release
build_cache_dir = ~/tmp/.pio/build

[metadata]
release_version = 0.0.1
product_name = Coop Controller
; At a minimum, for security you should set the following in a .env file in the root of the project:
;       CONTROLLER_AP_PASSWORD
;       DEV_OTA_UPDATE_PASSWORD
;   see others in coop_settings.h

[env]
lib_deps =
    google/googletest ; needed for code completion in IDEs, doesn't recognize with only test_framework = googletest
build_unflags = 
    -std=gnu++11
build_src_flags = -fconcepts

build_flags =
    -DPRODUCT_NAME="\"${metadata.product_name}\""
    -DFIRMWARE_VERSION="\"${metadata.release_version}\""
    -std=gnu++2a -fexceptions
    -DCORE_DEBUG_LEVEL=ARDUHAL_LOG_LEVEL_ERROR
    -Wall ; -Wextra -Wpedantic -Wconversion -Werror

lib_ldf_mode = deep+    ; required to fix WiFiManager update.h missing error

extra_scripts =
; pre:scripts/run_ca_cert_gen.py ; if you want a custom bundle, also uncomment EMBED_*FILES src/CMakeLists.txt and board_build.embed_*files below
    pre:scripts/set_build_num.py
    pre:scripts/set_env_vars.py
    pre:scripts/get_timezone_data.py
    pre:scripts/delete_bootloader_compile_commands.py

test_framework = googletest
check_skip_packages = yes
check_src_filters =
    +<src/*>
    +<include/*>
    +<lib/*>
    +<test/common/*>
    -<.pio/*>


[embedded]
board = esp32dev
platform = platformio/espressif32@^6.5.0
framework = arduino, espidf
lib_deps =
    ${env.lib_deps}
    arcao/Syslog @ 2.0.0
    bblanchon/ArduinoJson @ 6.21.3
    https://github.com/tzapu/WiFiManager#20535ed ; @ 2.0.16-rc.2 ; latest on pio outdated
    256dpi/MQTT @ 2.5.1
    michalmonday/CSV Parser @ 1.2.1

    milesburton/DallasTemperature @ 3.11.0
    paulstoffregen/OneWire @ 2.3.8

    adafruit/Adafruit SSD1306 @ 2.5.7
    adafruit/Adafruit GFX Library @ 1.11.9
    rzeldent/micro-moustache @ 1.0.1
    
    ayushsharma82/ESP-DASH @ 4.0.3
    https://github.com/dmkishi/Dusk2Dawn#2e12244 ; latest on pio outdated
    dawidchyrzynski/home-assistant-integration @ 2.0.0
    robtillaart/HeartBeat @ 0.3.3

; jpb10/SolarCalculator
; ropg/ezTime@^0.8.3
; durydevelop/OLED SSD1306 - SH1106@^1.0.7
; arduino-libraries/Arduino_JSON@^0.2.0
; heman/AsyncMqttClient-esphome@^2.0.0
; chrisjoyce911/esp32FOTA @ ^0.2.7

build_flags =
    ${env.build_flags}
    -isystem "${platformio.packages_dir}/framework-arduinoespressif32/libraries" ; suppress no-missing-field-initializers warnings in framework-arduinoespressif32->../I2S.cpp (doesn't fix it currently)
    -isystem "${platformio.workspace_dir}/libdeps" ; suppress unused tokens warnings in libdeps->../OneWire.cpp (doesn't fix it currently)

board_build.partitions = partitions.csv
board_build.embed_txtfiles =
    .pio/build/timezone_data/zones.csv
;     .pio/build/certs/ca_cert.pem ; if you want a cert, also uncomment EMBED_TXTFILES ${project_dir}/certs/ca_cert.pem in src/CMakeLists.txt
; board_build.embed_files =
;     .pio/build/certs/ca_certs.bin ; if you want a custom bundle, also uncomment EMBED_FILES ${project_dir}/certs/ca_certs.bin in src/CMakeLists.txt
board_build.filesystem = spiffs

extra_scripts = 
    post:scripts/set_debug_extra_cmds_if_linux.py

test_speed = 115200

monitor_speed =  115200 ; 921600 ;
; monitor_port = COM11 ; /dev/ttyUSB0 ;
; monitor_echo = yes
; monitor_eol = LF
monitor_filters =   ; if terminal not working => 2x CTRL+T->CTRL+D
    ; colorize
    ; time
    ; esp32_exception_decoder ; for backtrace, can't be used with the other filters

debug_tool = esp-prog ; 12-TDI, 13-TCK, 14-TMD, 15-TDO
; debug_port = COM13 ; for esp-prog, first port is jtag, second one is uart
; debug_svd_path = ${platformio.packages_dir}/framework-arduinoespressif32/tools/ide-debug/svd/esp32.svd
debug_init_break = tbreak app_main
debug_extra_cmds =
;    source .gdbinit ; <- loads stl pretty printers, may not work on Windows if GDB doesn't support Python and will need comment out

;upload_protocol = esp-prog
upload_speed = 921600
upload_protocol = esptool ; esp-prog txd0 -> esp-01s tx
;upload_port = /dev/ttyUSB2
;upload_protocol = espota
; upload_port = `printenv DEV_OTA_REMOTE_DEVICE_IP` ; IP_ADDRESS_HERE or mDNS_NAME.local
; upload_flags =
; 	--host_port=`printenv DEV_OTA_HOST_PORT` ; Windows must open firewall
;   --spiffs
;   --auth=DEV_OTA_UPDATE_PASSWORD
;   --port=ESP_PORT


[env:esp32-debug]
extends = embedded
build_type = debug
; build_unflags =
;     ${env.build_unflags}
;     -Os
build_flags =
    ${embedded.build_flags}
    ; -O0
    -DIS_DEBUG_BUILD
    -DENABLE_LOGGING
; used in sdkconfig_local.h to allow higher debug levels to be used if needed
    -DBUILD_MAX_LOG_LEVEL=5
    -DLOG_LEVEL=LOG_LEVEL_VERBOSE
    ; -lgcov --coverage -fprofile-abs-path ;<- not working with espidf
    -DWIFI_SETUP_TIMEOUT_SECS=120
    -DMQTT_PUB_INTERVAL_SECS=1
; debug_build_flags =
;    -O0 ;-ggdb -g ;-ggdb3 -g3 <- not working with espidf, undefined reference to `vtable for fs::FileImpl
extra_scripts =
    ${env.extra_scripts}
    ${embedded.extra_scripts}
    post:scripts/create_json_ota_update_file.py
; https://docs.platformio.org/en/latest/core/userguide/cmd_test.html#usage
; should run `pio check -e esp32-debug` to check code
test_ignore = *


[env:esp32-ut] ; debug unit tests
extends = env:esp32-debug
build_unflags =
    ${env.build_unflags}
    -O0
build_flags =
    ${env:esp32-debug.build_flags}
    -Os
    -DPIO_UNIT_TESTING
; https://docs.platformio.org/en/latest/advanced/unit-testing/frameworks/custom/runner.html
debug_test = embedded/debug/test_all_libs ;<- run pio test first to compile for debug
extra_scripts =
    ${env.extra_scripts}
; pio test -vve esp32-ut -f embedded/debug/* -i -- <- run all tests
test_filter =
    embedded/debug/*
test_ignore =
; requires server to be set up -> pio test -vve esp32-ut -f embedded/debug/test_with_server -i embedded/debug/test_all_libs
    embedded/debug/test_with_server
    embedded/release/*
    desktop/*
; should run `pio check -e esp32-ut` to check code
check_src_filters =
    ${env:esp32-debug.check_src_filters}
    +<test/embedded/debug/*>


[env:esp32-release]
extends = embedded
build_type = release
build_flags =
    ${embedded.build_flags}
    -Os
    -DENABLE_LOGGING
    -DBUILD_MAX_LOG_LEVEL=3
    -DLOG_LEVEL=LOG_LEVEL_INFO
monitor_filters =   ; if terminal not working => 2x CTRL+T->CTRL+D
     colorize
     time
extra_scripts =
    ${env.extra_scripts}
    post:scripts/create_json_ota_update_file.py

test_filter =
    embedded/release/*
test_ignore =
    embedded/debug/*
    desktop/*
; should run `pio check -e esp32-release` to check code
check_src_filters =
    ${env.check_src_filters}
    +<test/embedded/release/*>


[env:desktop]
platform = native
build_type = debug
build_unflags =
    ${env.build_unflags}
    -Os
build_flags =
    ${env.build_flags}
    -O0
    -I test/desktop
    -DDEBUG
    -DIS_DEBUG_BUILD
    -DLOG_LEVEL=LOG_LEVEL_VERBOSE
; native is only used for unit testing
    -DPIO_UNIT_TESTING
    -lgcov --coverage -fprofile-abs-path
extra_scripts = 
    ${env.extra_scripts}
    pre:scripts/create_set_path_compile_commands.py    
debug_build_flags = 
    -DPIO_UNIT_TESTING
    -O0 -ggdb3 -g3
; lib_compat_mode = off
; lib_ignore = hal
; upload_protocol = native

debug_test = desktop/test_all_libs
; pio test -vve desktop -f desktop/*
test_filter =
    desktop/*
test_ignore =
    embedded/*
; should run `pio check -e desktop` to check code
check_src_filters =
    ${env.check_src_filters}
    +<test/desktop/*>


